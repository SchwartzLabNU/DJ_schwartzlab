function analysisOutput = runAnalysis(pipeline, funcType, funcName, P, workingQuery, previousLoad)
if isempty(previousLoad)
    preload = false;
else
    preload = true;
end

switch funcType
    case 'Epoch'
        if preload
            [~, ep_in_datasets] = getEpochsInQuery(workingQuery);
            [~, ep_in_datasets_prev] = getEpochsInQuery(workingQuery & [previousLoad.input]);
            ep_in_datasets = ep_in_datasets - ep_in_datasets_prev.proj;
            ep_count = ep_in_datasets.count;
        else
            [ep_count, ep_in_datasets] = getEpochsInQuery(workingQuery);
        end
        
        all_ep_struct = ep_in_datasets.fetch();
        fprintf('Running %s on %d epochs...\n', funcName, ep_count);
        
        s = struct('input', [], 'result', []);
        analysisOutput = repmat(s, ep_count,1);        
        for i=1:ep_count
            ep = sl.Epoch & all_ep_struct(i);
            eval(sprintf('R=%s(ep,app.pipeline,P);', funcName));
            analysisOutput(i).input = all_ep_struct(i);
            analysisOutput(i).result = R;
        end
        
    case 'Dataset'
        if preload
            datasets = sl.Dataset & workingQuery.proj;
            datasets_prev = workingQuery & [previousLoad.input];
            datasets = datasets - datasets_prev.proj;
        else
            datasets = sl.Dataset & workingQuery.proj;
        end
        
        all_ds_struct = datasets.fetch();
        fprintf('Running %s on %d datasets...\n', funcName, datasets.count);
        s = struct('input', [], 'result', []);
        analysisOutput = repmat(s, datasets.count,1);
        
        for i=1:datasets.count
            curDataSet = sl.Dataset & all_ds_struct(i);
            eval(sprintf('R=%s(curDataSet,app.pipeline,P);', funcName));
            analysisOutput(i).input = all_ds_struct(i);
            analysisOutput(i).result = R;
        end
    case 'Cell'
         if preload
            allcells = sl.MeasuredCell & workingQuery.proj;
            allcells_prev = workingQuery & [previousLoad.input];
            allcells = allcells - datasets_prev.proj;
        else
            datasets = sl.Dataset & workingQuery.proj;
        end
        
        all_ds_struct = datasets.fetch();
        fprintf('Running %s on %d datasets...\n', funcName, datasets.count);
        s = struct('input', [], 'result', []);
        analysisOutput = repmat(s, datasets.count,1);
        
        for i=1:datasets.count
            curDataSet = sl.Dataset & all_ds_struct(i);
            eval(sprintf('R=%s(curDataSet,app.pipeline,P);', funcName));
            analysisOutput(i).input = all_ds_struct(i);
            analysisOutput(i).result = R;
        end
        
    case 'Mulit-cell'
        
end
fprintf('done\n');