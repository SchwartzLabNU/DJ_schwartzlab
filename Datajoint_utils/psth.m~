function [psth_x, psth_y] = psth(cell_id, epoch_numbers, binSize, channel)
if nargin < 4
    channel = 1;
end
if nargin < 3
    binSize = 10;
end
psth_y = [];

firstEpoch = sl.Epoch & sprintf('cell_id="%s"', cell_id) & sprintf('epoch_number=%d', epoch_numbers(1));
ep_struct = firstEpoch.fetch('*');
sampleRate = ep_struct.sample_rate;
preTime = ep_struct.protocol_params.preTime;
stimTime = ep_struct.protocol_params.stimTime;
postTime = ep_struct.protocol_params.postTime;

Nepochs = length(epoch_numbers);
N_samples = ceil((preTime + stimTime + postTime) / psth_bin);
total_time_ms = preTime + stimTime + postTime; %ms
psth_x = [0:N_samples-1] * psth_bin / 1E3 - pre_time / 1E3; % units of seconds

allSpikes = [];
for i=1:Nepochs
    thisEpoch = sl.Epoch & sprintf('cell_id="%s"', cell_id) ...
        & sprintf('epoch_number=%d', epoch_numbers(i)) & sprintf('channel=%d', channel);
    thisSpikeTrain = sl.SpikeTrain & thisEpoch;       
    ep_struct = thisEpoch.fetch('*');
    cur_sampleRate = ep_struct.sample_rate;
    cur_preTime = ep_struct.protocol_params.preTime; 
    cur_stimTime = ep_struct.protocol_params.stimTime;
    cur_postTime = ep_struct.protocol_params.postTime;
    
    if cur_sampleRate~=sampleRate || cur_preTime~=preTime || cur_stimTime~=stimTime || cur_postTime~=postTime
        disp('Error: all epochs must have matching pre, stim, post time and sampleRate');
    end
    
    
    cur_sp = fetch1(thisSpikeTrain, 'sp');
    cur_sp = 1E3 * cur_sp ./ sample_rate; %now in units of ms, starting at zero
    allSpikes = [allSpikes cur_sp];
end

disp([num2str(length(allSpikes)) ' spikes found']); 

bins = 0:psth_bin:total_time_ms;

spCount = histcounts(allSpikes,bins);
if gauss_win > 0
    w = gausswin(gauss_win);
    w = w / sum(w); %normalize correctly
    spCount = conv(spCount,w,'same');
elseif sliding_win > 0
    spCount = smooth(spCount,sliding_win);
end

if isempty(spCount)
   spCount = zeros(1,length(bins));
end

%convert to Hz
psth_y = 1E3 * spCount ./ (N_epochs * psth_bin);

if baseline_subtract
   baseline = mean(psth_y(psth_x < 0));
   psth_y = psth_y - baseline;
end
